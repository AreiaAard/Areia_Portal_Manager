<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Areia_Portal_Manager"
   author="Areia"
   id="8e5f000d72c9f11a6debbc6b"
   language="Lua"
   purpose="Streamline use of chaos, limited-use, and other portals"
   save_state="y"
   date_written="2021-05-30 07:00:00"
   requires="5.06"
   version="0.00"
   >
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
    <alias
     match="^apm\s+(?:display|li?st?|show)(?:\s+(?<type>\w+))?$"
     enabled="y"
     script="PortalHandler.list"
     regexp="y"
     ignore_case="y"
     sequence="100"
    ></alias>
    <alias
     match="^apm\s+(?<enable>en|dis)able\s+(?<type>\w+)(?:\s+(?<index>\w+))?$"
     enabled="y"
     script="PortalHandler.enable"
     regexp="y"
     ignore_case="y"
     sequence="100"
    ></alias>
    <alias
     match="^apm\s+port(?:\s+(?<arg>.+))?$"
     enabled="y"
     script="PortalHandler.use_set_script"
     regexp="y"
     ignore_case="y"
     sequence="100"
    ></alias>
    <alias
     match="^(?<type>ch|ho|lu|ns|st)?port\s+(?<id>.+)$"
     enabled="y"
     script="PortalHandler.use_wrapper"
     regexp="y"
     ignore_case="y"
     sequence="100"
    ></alias>
</aliases>



<triggers>
    <trigger
     match="^WHOOOOOOOOOOOOSH!$"
     enabled="Y"
     script="PortalHandler.enter"
     regexp="y"
     sequence="100"
    ></trigger>
</triggers>



<script>
<![CDATA[
require "commas"
require "copytable"
require "gmcphelper"
require "tprint"
require "var"
require "wait"
dofile(GetInfo(60) .. "aardwolf_colors.lua")



--------------------------------------------------
-- PortalHandler
--------------------------------------------------

PortalHandler = {}

function PortalHandler.initialize()
    PortalHandler.use_define()
    PortalHandler.DISABLE = 500
    PortalHandler.PORTAL_TYPE = {
        ["CHAOS"] = "CH", ["HERO_ONLY"] = "HO", ["LIMITED_USE"] = "LU",
        ["NOSAVE"] = "NS", ["STANDARD"] = "ST"
    }
end

function PortalHandler.list(alias, line, wc)
    local arg = wc.type:lower()
    if (arg == "" or arg == "all") then
        PortalHandler.list_all()
        return
    end
    local short = PortalHandler.get_type(arg)
    if (not short) then
        Utility.plugin_msg("Invalid portal type: @R" .. arg)
        return
    end
    PortalHandler.list_type(short)
end

function PortalHandler.list_all()
    PortalHandler.list_type(PortalHandler.PORTAL_TYPE.STANDARD)
    PortalHandler.list_type(PortalHandler.PORTAL_TYPE.CHAOS)
    PortalHandler.list_type(PortalHandler.PORTAL_TYPE.HERO_ONLY)
    PortalHandler.list_type(PortalHandler.PORTAL_TYPE.LIMITED_USE)
    PortalHandler.list_type(PortalHandler.PORTAL_TYPE.NOSAVE)
end

function PortalHandler.list_type(portalType)
    local short, long = PortalHandler.get_type(portalType)
    local title = Utility.pascal_case(long) .. " Portals:"
    local dirPattern = DB.fixsql(short .. "port %") -- eg, to match chport xxx
    local sql = [[
        SELECT rooms.name as room, rooms.area, exits.touid,
        exits.fromuid, exits.dir, exits.level
        FROM exits LEFT OUTER JOIN rooms ON rooms.uid=exits.touid
        WHERE exits.fromuid='*' AND exits.dir LIKE %s
        ORDER BY rooms.area,exits.touid
    ]]
    local portals = DB.query(sql:format(dirPattern))
    PortalHandler.display_list(title, portals)
end

function PortalHandler.display_list(title, portals)
    local charLevel = tonumber(gmcp("char.status.level")) or 1
    local charTier = tonumber(gmcp("char.base.tier")) or 0
    local effectiveCharLevel = charTier * 10 + charLevel
    local seperator = "+-----+------------+----------------------+-------+----------------------+-----+"
    local header = "|   # | area       | room name            |  vnum | portal commands      | lvl |"
    Utility.print(title)
    Utility.print(seperator)
    Utility.print(header)
    Utility.print(seperator)
    for i, portal in ipairs(portals) do
        local area = portal.area or "N/A"
        local room = portal.room or "N/A"
        local level = portal.level
        local disabled = level >= PortalHandler.DISABLE
        -- now that we know whether the portal is disabled, we set the level to
        -- the actual portal's level for displaying
        level = disabled and level - PortalHandler.DISABLE or level
        local text = string.format(
            "|%s%+3.3s | %-10.10s | %-20.20s | %+5.5s | %-20.20s | %+3.3s |",
            disabled and "x" or " ", i, area, room, portal.touid, portal.dir, level
        )
        if (level > effectiveCharLevel) then
            -- char cannot use this portal, so simply print it
            Utility.print((disabled and "@w" or "@G") .. text)
        else
            -- char can use the portal; make the line clickable
            local action = "mapper goto " .. portal.touid
            local hint = string.format("Click here to run to %s\n[ %s ]", room, portal.dir)
            local textColor = disabled and "silver" or "lightgreen"
            Hyperlink(action, text, hint, textColor, "black", false, true)
            Note("")
        end
    end
    Utility.print("+-------------------------------------------------+\n")
end

function PortalHandler.enable(alias, line, wc)
    local short = PortalHandler.get_type(wc.type)
    if (not short) then
        Utility.plugin_msg("Invalid portal type: @R" .. arg)
        return
    end
    local index = wc.index
    local enable = wc.enable == "en"
    if (index == "") then
        PortalHandler.enable_type(short, enable)
        return
    end
    index = tonumber(index)
    if (not index) then
        Utility.plugin_msg(string.format(
            "Invalid index: @R%s@w. Must be a number.", wc.index
        ))
        return
    end
    PortalHandler.enable_index(short, index, enable)
end

function PortalHandler.enable_type(portalType, enable)
    if (enable == nil) then
        enable = true
    end
    local short, long = PortalHandler.get_type(portalType)
    local dirPattern = DB.fixsql(short .. "port %")
    local sql = [[
        UPDATE exits SET level = level %s %s
        WHERE fromuid='*' AND dir LIKE %s AND level%s%s
    ]]
    local changes = DB.exec(sql:format(
        enable and "-" or "+", -- reduce level if enabling; otherwise increase
        PortalHandler.DISABLE, -- change level by this much
        dirPattern, -- for exits that use this format
        enable and ">=" or "<", -- if enable, only affect disabled portals and vice versa
        PortalHandler.DISABLE -- level threshold
    ))
    if (changes == 0) then
        Utility.plugin_msg(string.format(
            "No portals modified. Either all %s portals", long:lower()
        ), string.format(
            "are already %sabled, or something went wrong.",
            enable and "en" or "dis"
        ))
        return
    end
    Utility.plugin_msg(string.format(
        "%sabled %d %s portal%s.",
        enable and "En" or "Dis", changes,
        long:lower(), changes == 1 and "" or "s"
    ))
end

function PortalHandler.enable_index(portalType, index, enable)
    if (enable == nil) then
        enable = true
    end
    index = tonumber(index) or 1
    local short, long = PortalHandler.get_type(portalType)
    local dirPattern = DB.fixsql(short .. "port %")
    local sql = [[
        SELECT rooms.name as room, rooms.area, exits.touid,
        exits.fromuid, exits.dir, exits.level
        FROM exits LEFT OUTER JOIN rooms ON rooms.uid=exits.touid
        WHERE exits.fromuid='*' AND exits.dir LIKE %s
        ORDER BY rooms.area,exits.touid
    ]]
    local portals = DB.query(sql:format(dirPattern))
    local portal = portals[index]
    if (not portal) then
        Utility.plugin_msg(string.format(
            "Could not find portal #%d in the list of %s portals.",
            index, long:lower()
        ))
        return
    end
    local sql = [[
        UPDATE exits SET level = level %s %s
        WHERE fromuid='*' AND dir = %s AND level%s%s
    ]]
    local changes = DB.exec(sql:format(
        enable and "-" or "+", PortalHandler.DISABLE, DB.fixsql(portal.dir),
        enable and ">=" or "<", PortalHandler.DISABLE
    ))
    Utility.plugin_msg(string.format(
        "%sabled %s portal #%d with keywords '%s'.",
        enable and "En" or "Dis", long:lower(), index, portal.dir
    ))
end

function PortalHandler.use_wrapper(alias, line, wc)
    PortalHandler.use(wc.type:lower(), wc.id, Invmon.get_portal_slot_item())
end

function PortalHandler.use_set_script(alias, line, wc)
    local arg = wc.arg
    if (arg:lower() == "default") then
        var.useScript = nil
    
    elseif (arg == "...") then
        local firstScriptLine = "local ptype, id, worn = ...\r\n"
        local msg = "Enter the script to run whenever you use a portal.\n" ..
            "(The variables `ptype`, `id`, and `worn` are available here.)"
        local title = "Enter Portal Script"
        -- default is the current script, but hide the secret first line
        local default = var.useScript or PortalHandler.use_default()
        default = default:gsub(firstScriptLine, "")
        local extras = {}
        extras.validate = function(str) return str ~= "" end
        local res = utils.editbox(msg, title, default, nil, nil, extras)
        if (not res) then
            Utility.plugin_msg("Script input canceled.")
            return
        end
        if (not Utility.starts_with(res, firstScriptLine)) then
            res = firstScriptLine .. res -- add the secret first line back
        end
     var.useScript = res
    
    elseif (arg ~= "") then
        var.useScript = string.format("local ptype, id, worn = ...\r\nExecute('%s')", arg)
    end
    
    if (PortalHandler.use_define()) then
        local showFull = arg == "" -- show only partial script unless no arg
        PortalHandler.use_display(showFull)
    end
end

function PortalHandler.use_default()
    return "local ptype, id, worn = ...\r\n" ..
        "if (tonumber(id)) then\r\n" ..
        "    Execute('dinv portal use id ' .. id)\r\n" ..
        "else\r\n" ..
        "    Execute('dinv portal use key ' .. id)\r\n" ..
        "end"
end

function PortalHandler.use_define()
    local script = var.useScript
    if (not script) then
        script = PortalHandler.use_default()
        if (not GetPluginInfo("88c86ea252fc1918556df9fe", 17)) then
            Utility.plugin_msg(
                "Set to use default script for portal usage, but DINV is not",
                "enabled. Install/enable DINV, or set a different script."
            )
        end
    end
    local success = true
    local func, errmsg = loadstring(script)
    if (not func) then
        success = false
        Utility.plugin_msg("Error found in this script:", errmsg)
        func = function() Utility.plugin_msg("No script set to use portals.") end
    end
    PortalHandler.use = func
    return success
end

function PortalHandler.use_display(showFull)
    local script = var.useScript or PortalHandler.use_default()
    -- convoluted extra gsub here to make utils.split happy, as it won't split
    -- by two chars \r\n
    local scriptLines = utils.split(script:gsub("\r\n", "\n"), "\n")
    table.remove(scriptLines, 1) -- hide the secret first line
    local numScriptLines = #scriptLines
    local numToShow = showFull and numScriptLines or math.min(numScriptLines, 22)
    Utility.plugin_msg("Portal usage script:")
    for i = 1, numToShow do
        Utility.second_msg("@C" .. scriptLines[i])
    end
    if (numToShow < numScriptLines) then
        Utility.second_msg("@C...")
    end
end

function PortalHandler.enter(trigger, line, wc)
    wait.make(PortalHandler.implode_monitor)
end

function PortalHandler.implode_monitor()
    local line = wait.regexp("^(.+?) implodes after its final use\\.$", 5)
    if (not line) then
        return
    end
    local uid = gmcp("room.info.num")
    local sql = [[
        UPDATE exits SET level = level + %s
        WHERE fromuid = '*' AND dir LIKE 'luport %%'
        AND touid = %s AND level <= %s
    ]]
    local changes = DB.exec(sql:format(
        PortalHandler.DISABLE, uid, PortalHandler.DISABLE
    ))
    if (changes >= 0) then
        Utility.plugin_msg(string.format(
            "Disabled limited-use portal leading to room #%s.", uid
        ))
    end
end

function PortalHandler.get_type(portalType)
    portalType = portalType:upper()
    for long, short in pairs(PortalHandler.PORTAL_TYPE) do
        if (portalType == long or portalType == short) then
            return short:lower(), long:gsub("_", "-"):lower()
        end
    end
    return nil, nil
end
]]>
</script>



<triggers>
    <trigger
     match="^You have now joined Global Quest \# (?<id>\d+)\. See 'help gquest' for available commands\.$"
     enabled="y"
     script="GQ.join"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^Showing Global Quest \# (?<id>\d+) for levels \d+ to \d+.*:$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.in_progress"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^Global Quest: Global quest \# (?<id>\d+) for levels \d+ to \d+ has now started\.$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.start"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^Global Quest: Global Quest \# (?<id>\d+) has been won by (?<player>\w+) - \d+(?:nd|st|rd|th) win\.$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.complete"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^Global Quest: (?<player>\w+) has completed Global Quest \# (?<id>\d+)\.$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.complete"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^Global Quest: Global quest \# (?<id>\d+) \(extended\) is now over\.$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.incomplete"
     regexp="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^You are no longer part of Global Quest \# (?<id>\d+) and will be unable to rejoin\.$"
     group="trigger_group_gq"
     enabled="n"
     script="GQ.incomplete"
     regexp="y"
     sequence="100"
    ></trigger>
</triggers>

<script>
<![CDATA[
--------------------------------------------------
-- GQ
--------------------------------------------------

GQ = {}

function GQ.initialize()
    GQ.currentId = nil
    GQ.started = false
end

function GQ.join(trigger, line, wc)
    GQ.currentId = tonumber(wc.id)
    EnableTriggerGroup("trigger_group_gq", true)
    -- Check whether the GQ has already started before we joined, in which case
    -- GQ.start won't have been called
    SendNoEcho("gq progress")
end

function GQ.in_progress(trigger, line, wc)
    if (tonumber(wc.id) == GQ.currentId and not GQ.started) then
        GQ.started = true
        PortalHandler.enable_type(PortalHandler.PORTAL_TYPE.CHAOS, false)
    end
end

function GQ.start(trigger, line, wc)
    if (tonumber(wc.id) == GQ.currentId) then
        GQ.started = true
        PortalHandler.enable_type(PortalHandler.PORTAL_TYPE.CHAOS, false)
    end
end

function GQ.complete(trigger, line, wc)
     if (wc.player == gmcp("char.base.name")
    and tonumber(wc.id) == GQ.currentId) then
        GQ.finish()
    end
end

function GQ.incomplete(trigger, line, wc)
    if (tonumber(wc.id) == GQ.currentId) then
        GQ.finish()
    end
end

function GQ.finish(trigger, line, wc)
    GQ.currentId = nil
    GQ.started = false
    EnableTriggerGroup("trigger_group_gq", false)
    PortalHandler.enable_type(PortalHandler.PORTAL_TYPE.CHAOS, true)
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- DB
--------------------------------------------------

DB = {}

function DB.initialize()
    DB.db = nil
end

function DB.open()
    local directory = GetInfo(66)
    local world = DB.sanitize_filename(WorldName())
    local mapperDB = string.format("%s%s.db", directory, world)
    local db, errcode, errmsg = sqlite3.open(mapperDB)
    if not (db and db:isopen()) then
        DB.error_msg("open", errcode, errmsg)
        return false
    end
    DB.db = db
    return true
end

function DB.close()
    if not (DB.db and DB.db:isopen()) then
        return true
    end
    local code = DB.db:close()
    DB.db = nil
    if (code == -1) then
        DB.error_msg("close", code, "Database id not found.")
    elseif (code == -2) then
        DB.error_msg("close", code, "Database not open.")
    end
    return code == sqlite3.OK
end

function DB.query(sql)
    local results = {}
    if (not DB.open()) then
        return results
    end
    for result in DB.db:nrows(sql) do
        table.insert(results, result)
    end
    DB.close()
    return results
end

function DB.exec(sql)
    local changes = 0
    local cmd = sql
    if (type(cmd) == "table") then
        table.insert(cmd, 1, "BEGIN TRANSACTION")
        table.insert(cmd, "COMMIT")
        cmd = table.concat(cmd, ";")
    end
    if (not DB.open()) then
        return changes
    end
    if (DB.check(DB.db:exec(cmd))) then
        changes = DB.db:changes()
    end
    DB.close()
    return changes
end

function DB.check(code)
    if (code == sqlite3.OK or code == sqlite3.ROW or code == sqlite3.DONE) then
        return true
    end
    local errmsg = DB.db:errmsg()
    DB.db:exec("ROLLBACK")
    DB.error_msg("modify", code, errmsg)
    return false
end

function DB.error_msg(action, code, msg)
    Utility.plugin_msg(string.format(
        "@RError@w. Failed to %s the mapper database (code %s).", action, code
    ), msg)
end

function DB.fixsql(sql)
    if (type(sql) == "boolean") then
        return sql and 1 or 0
    end
    if (not sql) then
        return "NULL"
    end
    return string.format("'%s'", string.gsub(sql, "'", "''"))
end

function DB.sanitize_filename(filename)
    return trim(string.gsub(filename, "[^%w%s()_-]", ""))
end
]]>
</script>



<triggers>
    <trigger
     match="^\{eqdata\}$"
     name="trigger_eqdata_start"
     enabled="n"
     script="Invmon.eqdata_start"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^(?<id>\d+),(?<flags>[A-Z]*),(?<desc>.+?),(?<level>\d{1,3}),(?<type>\d{1,2}),(?<unique>1|0),(?<worn>-?\d{1,2}),(?<timer>-?\d+)$"
     name="trigger_eqdata_item"
     enabled="n"
     script="Invmon.eqdata_item"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^\{/eqdata\}$"
     name="trigger_eqdata_end"
     enabled="n"
     script="Invmon.eqdata_end"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    ></trigger>
    
    <trigger
     match="^\{invmon\}(?<action>\d{1,2}),(?<id>\d+),(?<container>-?\d+),(?<worn>-?\d{1,2})$"
     enabled="y"
     script="Invmon.event"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^\{invitem\}.+$"
     enabled="y"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    ></trigger>
    <trigger
     match="^You will (?<setting>now|no longer) see inventory update tags\.$"
     enabled="y"
     script="Invmon.toggled"
     regexp="y"
     sequence="100"
    ></trigger>
</triggers>


<script>
<![CDATA[
--------------------------------------------------
-- Invmon
--------------------------------------------------

Invmon = {}

function Invmon.initialize()
    Invmon.portalWish = var.portalWish == "1" and true or false
    Invmon.set_portal_slot_item()
end

function Invmon.at_first_active()
    Execute("sendgmcp config invmon yes")
    Invmon.eqdata_request()
end

function Invmon.eqdata_request()
    EnableTrigger("trigger_eqdata_start", true)
    SendNoEcho("eqdata")
end

function Invmon.eqdata_start(trigger, line, wc)
    EnableTrigger("trigger_eqdata_start", false)
    EnableTrigger("trigger_eqdata_item", true)
    EnableTrigger("trigger_eqdata_end", true)
end

function Invmon.eqdata_item(trigger, line, wc)
    local worn = tonumber(wc.worn)
    if ((worn == 25 or worn == 26) and not Invmon.portalWish) then -- second/hold
        Invmon.set_portal_slot_item(wc.id)
    elseif (worn == 31) then -- portal slot
        Invmon.set_portal_slot_item(wc.id)
        if (not Invmon.portalWish) then
            -- Item is worn in portal location, so we must have the wish
            Invmon.set_portal_wish(true)
        end
    end
end

function Invmon.eqdata_end(trigger, line, wc)
    EnableTrigger("trigger_eqdata_item", false)
    EnableTrigger("trigger_eqdata_end", false)
end

function Invmon.event(trigger, line, wc)
    local actionWorn = wc.action == "2" and true or false
    local worn = tonumber(wc.worn)
    if ((worn == 25 or worn == 26) and not Invmon.portalWish) then -- second/hold
        Invmon.set_portal_slot_item(actionWorn and wc.id or "")
    elseif (worn == 31) then -- portal slot
        Invmon.set_portal_slot_item(actionWorn and wc.id or "")
        if (not Invmon.portalWish) then
            -- Item is/was worn in portal location, so we must have the wish
            Invmon.set_portal_wish(true)
        end
    end
end

function Invmon.toggled(trigger, line, wc)
    if (wc.setting == "no longer") then
        Utility.plugin_msg("Invmon is required to function fully.",
            "Submit @Yinvmon @wto re-enable it."
        )
    end
end

function Invmon.get_portal_slot_item()
    return Invmon.portalSlotItem
end

function Invmon.set_portal_slot_item(id)
    Invmon.portalSlotItem = id or ""
end

function Invmon.set_portal_wish(setting)
    Invmon.portalWish = setting and true or false
    var.portalWish = Invmon.portalWish and 1 or 0
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- GMCPHandler
--------------------------------------------------

GMCPHandler = {}

function GMCPHandler.initialize()
    GMCPHandler.initialized = false
    GMCPHandler.char = {}
    GMCPHandler.char.level = tonumber(var.charLevel) or 0
end

function GMCPHandler.at_first_active()
    Invmon.at_first_active()
end

function GMCPHandler.level_change(newLevel)
    if (GMCPHandler.char.level <= 199 and newLevel >= 200) then
        PortalHandler.enable_type(PortalHandler.PORTAL_TYPE.HERO_ONLY, true)
    elseif (GMCPHandler.char.level >= 200 and newLevel <= 199) then
        PortalHandler.enable_type(PortalHandler.PORTAL_TYPE.HERO_ONLY, false)
    end
    GMCPHandler.char.level = newLevel
    var.charLevel = newLevel
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------

Utility = {}

function Utility.initialize()
    local initializers = {
        PortalHandler.initialize,
        GQ.initialize,
        DB.initialize,
        Invmon.initialize,
        GMCPHandler.initialize,
    }
    for _, initializer in ipairs(initializers) do
        initializer()
    end
end

function Utility.deinitialize()
end

function Utility.print(str)
    -- Lets us use Aard color codes in our ColourNotes
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("@w%s@w", str))))
end

function Utility.plugin_msg(str, ...)
    Utility.print(string.format("[@YPortal Manager@w]: %s", str))
    for _, msg in ipairs{...} do
        Utility.second_msg(msg)
    end
end

function Utility.second_msg(str)
    Utility.print(string.format("                  %s", str))
end

function Utility.display_greeting()
end

function Utility.pascal_case(str)
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end

function Utility.starts_with(s, t)
    if not (type(s) == "string" and type(t) == "string") then
        return false
    end
    return s:sub(1, #t) == t
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------

function OnPluginInstall()
    Utility.initialize()
    Utility.display_greeting()
    if (IsConnected()) then
        Send_GMCP_Packet("request char")
    end
end

function OnPluginEnable()
    OnPluginInstall()
end

function OnPluginClose()
    Utility.deinitialize()
end

function OnPluginDisable()
    OnPluginClose()
end

function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then
        if (not GMCPHandler.initialized) then
            if (text ~= "char.status") then
                Send_GMCP_Packet("request char")
                return
            end
            if (gmcp("char.status.state") ~= "3") then
                return
            end
            GMCPHandler.initialized = true
            GMCPHandler.at_first_active()
        end
        if (text == "char.status") then
            local level = tonumber(gmcp("char.status.level"))
            if (level ~= GMCPHandler.char.level) then
                GMCPHandler.level_change(level)
            end
        end
    end
end
]]>
</script>


</muclient>
